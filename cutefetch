#!/bin/sh
# ----------------------------------------------------------------
# Cutefetch v1.0
#
# Tiny colored fetch script with cute little animals
#
# Authored by: elenapan (https://github.com/elenapan)
# Modified by: strafe (https://github.com/strafe)
# Modified by: cybardev (https://github.com/cybardev)
# ----------------------------------------------------------------

# script information
scriptinfo() {
  printf "cutefetch - simple colored script to display system info\n"
  printf "Usage: cutefetch kitty/bunny\nIf no argument is given, kitty is assumed.\n"
  printf "       If unknown argument is given, this message is shown.\n"
}

# detect what OS the script is being run on
check_os() {
  uname_detected="$(uname -s)"
  case "$uname_detected" in
    Linux*)  echo linux  ;;
    Darwin*) echo macos  ;;
    *)       echo "$uname_detected" ;;
  esac
}

# store color codes in variables
setup_colors() {
  for i in {0..7}; do
      printf -v "c${i}" '%b' "\e[3${i}m"
  done

  readonly d=$'\e[1m'
  readonly t=$'\e[0m'
  readonly v=$'\e[7m'
}

# name of window manager (Mac OS)
get_wm_mac() {
  # From neofetch (https://github.com/dylanaraps/neofetch).
  local -r ps_line="$(ps -e | grep -o \
  -e "[S]pectacle" \
  -e "[A]methyst" \
  -e "[k]wm" \
  -e "[c]hun[k]wm" \
  -e "[y]abai" \
  -e "[R]ectangle")"

  case $ps_line in
    *chunkwm*)   echo chunkwm ;;
    *kwm*)       echo Kwm ;;
    *yabai*)     echo yabai ;;
    *Amethyst*)  echo Amethyst ;;
    *Spectacle*) echo Spectacle ;;
    *Rectangle*) echo Rectangle ;;
    *)           echo Quartz ;;
  esac
}

# get the screen resolution (Mac OS)
get_res_mac() {
  # print resolution of multiple displays, separated by commas
  # echo "$(system_profiler SPDisplaysDataType | awk '/Resolution:/ {printf $2"x"$4"\n"}' | xargs | sed 's/ /, /g')"

  # print resolution of retina display
  echo "$(system_profiler SPDisplaysDataType | grep Retina | awk '/Resolution:/ {printf $2"x"$4"\n"}')"
}

# set necessary variables
setup_variables() {
  # symbols
  readonly w="\xEF\x82\x8A" # window manager
  readonly k="\xEF\x82\xAD" # kernel
  readonly s="\xEF\x84\xA0" # shell
  readonly r="\xEF\x80\xBE" # resolution
  readonly n="\xEF\x87\xAB" # network

  # system information
  if [[ "$1" = "linux" ]]; then
    readonly wm="$(xprop -id $(xprop -root -notype | awk '$1=="_NET_SUPPORTING_WM_CHECK:"{print $5}') -notype -f _NET_WM_NAME 8t | grep -m 1 "WM_NAME" | cut -f2 -d \")"
    readonly kern="$(uname -r | cut -d '-' -f1)"
    readonly shell=$(basename $SHELL)
    readonly res="$(xwininfo -root | grep geometry | awk '{print $2}' | cut -d + -f1)"
    readonly net="$(nmcli -g common | grep -m 1 connected | awk '{print($4)}')"
    [[ -z $net ]] && readonly net="no wifi"
  elif [[ "$1" = "macos" ]]; then
    readonly wm="$(get_wm_mac)"
    readonly kern="$(uname -r | cut -d '-' -f1)"
    readonly shell="$(basename "$SHELL")"
    readonly res="$(get_res_mac)"
    readonly net="$(/System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport -I  | awk -F' SSID: '  '/ SSID: / {print $2}')"
  else
    echo "We do not support $1 yet. Sorry for the inconvenience."
    exit 1 ;
  fi
}

# set the eyes, ^.^ by default
eyes() {
  case "$1" in
	  "0" )  echo ". ." ;;
    "1" )  echo "· ·" ;;
    "2" )  echo "^ ^" ;;
    "3" )  echo "- -" ;;
    "4" )  echo "~ ~" ;;
    "5" )  echo "* *" ;;
    "7" )  echo "-.-" ;;
    "8" )  echo "~.~" ;;
    "9" )  echo "*.*" ;;
    "10")  echo "0.0" ;;
    "11")  echo "0 0" ;;
    "12")  echo "o o" ;;
    "13")  echo "o.o" ;;
     *  )  echo "^.^" ;;
  esac
}

# sysinfo with cute kitty
kittyfetch() {
  printf '\n             %s%s%b  %s%s\n   /\_/\     %s%b  %s%s\n  ( %s%s%s )    %s%b  %s%s\n   %s>%s %s^%s %s<%s     %s%b  %s%s\n             %s%b  %s%s\n\n' \
    "$d" "$c1" "$w" "$t" "$wm" \
    "$c3" "$k" "$t" "$kern" \
    "$d" "$(eyes $1)" "$t" "$c2" "$s" "$t" "$shell" \
    "$c1" "$t" "$c3" "$t" "$c1" "$t" "$c5" "$r" "$t" "$res" \
    "$c4" "$n" "$t" "$net"
}

# sysinfo with cute bunny
bunnyfetch() {
  printf '\n             %s%s%b  %s%s\n   (\ /)     %s%b  %s%s\n   ( %s%s%s)    %s%b  %s%s\n   c(%s"%s)(%s"%s)   %s%b  %s%s\n             %s%b  %s%s\n\n' \
    "$d" "$c1" "$w" "$t" "$wm" \
    "$c3" "$k" "$t" "$kern" \
    "$d" "$(eyes $1)" "$t" "$c2" "$s" "$t" "$shell" \
    "$c1" "$t" "$c1" "$t" "$c5" "$r" "$t" "$res" \
    "$c4" "$n" "$t" "$net"
}

# sysinfo with cute puppy
puppyfetch() {
  printf '\n             %s%s%b  %s%s\n   /^ ^\     %s%b  %s%s\n  / %s%s%s \    %s%b  %s%s\n  V\ Y /V    %s%b  %s%s\n             %s%b  %s%s\n\n' \
    "$d" "$c1" "$w" "$t" "$wm" \
    "$c3" "$k" "$t" "$kern" \
    "$d" "$(eyes $1)" "$t" "$c2" "$s" "$t" "$shell" \
    "$c5" "$r" "$t" "$res" \
    "$c4" "$n" "$t" "$net"
}

# sysinfo with cute icons
simplefetch() {
  printf '\n  %s%s%b  %s%s\n  %s%b  %s%s\n  %s%b  %s%s\n  %s%b  %s%s\n  %s%b  %s%s\n\n' \
    "$d" "$c1" "$w" "$t" "$wm" \
    "$c3" "$k" "$t" "$kern" \
    "$c2" "$s" "$t" "$shell" \
    "$c5" "$r" "$t" "$res" \
    "$c4" "$n" "$t" "$net"
}

# print the fetch info, kitty by default, bunny otherwise
main() {
  tput clear
  setup_colors
  setup_variables "$(check_os)"
  case "$1" in
    -k | --kitty | "" )
      kittyfetch $2 ;;
    -b | --bunny )
      [[ -z $2 ]] && eye="0" || eye="$2"
      bunnyfetch $eye ;;
    -p | --puppy )
      [[ -z $2 ]] && eye="11" || eye="$2"
      puppyfetch $eye ;;
    -s | --simple )
      simplefetch ;;
    * )
      scriptinfo
      exit 1 ;;
  esac
}

# call the main function
main $1 $2
